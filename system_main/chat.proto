syntax = "proto3";
package chat;

import "google/protobuf/empty.proto";

// ────────────────── Authentication ───────────────────────────────────────────
message CreateUserRequest  { string username = 1; string hashed_password = 2; string display_name = 3; }
message CreateUserResponse { string status   = 1; string message         = 2; string username      = 3; }

message LoginRequest       { string username = 1; string hashed_password = 2; }
message LoginResponse      { string status   = 1; string message         = 2; }

message LogoutRequest      { string username = 1; }
message LogoutResponse     { string status   = 1; string message         = 2; }

// ─────────── Single-item 2nd-Price Auction (unchanged) ──────────────────────
message StartAuctionRequest   { string auction_id = 1; int64 duration_seconds = 2; string item_name = 3; }
message StartAuctionResponse  { string status     = 1; string message         = 2; }

message SubmitBidRequest      { string auction_id = 1; string bidder_id = 2; double amount = 3; }
message SubmitBidResponse     { string status     = 1; string message  = 2; }

message EndAuctionRequest     { string auction_id = 1; }
message EndAuctionResponse    { string status     = 1; string message  = 2; }

message GetWinnerRequest      { string auction_id = 1; }
message GetWinnerResponse {
  string status      = 1;
  string message     = 2;
  string winner_id   = 3;
  double winning_bid = 4;
  double price       = 5;
}

// ────────────── Listing (single-item auctions) ──────────────────────────────
message AuctionInfo { string auction_id = 1; string item_name = 2; bool ended = 3; int64 time_left = 4; }
message ListAuctionsResponse { repeated AuctionInfo auctions = 1; }

// ═══════════════ Greedy-VCG Bundle Auction (NEW) ════════════════════════════

// (1) Create the combinatorial auction and define its items.
message StartBundleAuctionRequest {
  string  auction_id       = 1;
  string  creator_id       = 2;
  repeated string item_names = 3;          // e.g. ["mango","peach","strawberry"]
  int64   duration_seconds = 4;            // 0 if untimed
}

message BundleAuctionInfo {
  string auction_id   = 1;
  bool   ended        = 2;
  int64  time_left    = 3;                 // 0 if ended/untimed
  repeated string item_names = 4;
}

message StartBundleAuctionResponse { string status = 1; string message = 2; }

message ListBundleAuctionsResponse { repeated BundleAuctionInfo auctions = 1; }

// (2) Any bidder can ask for the item list to build their UI.
message ListBundleItemsRequest  { string auction_id = 1; }
message ListBundleItemsResponse { repeated string item_names = 1; }

// (3) Submit a single-minded bid for a bundle of indices in that list.
message SingleMindedBid {
  string  auction_id = 1;
  string  bidder_id  = 2;
  repeated uint32 item_ids = 3;   // indices into item_names
  double  value      = 4;
}

// (4) Run allocation & return VCG-style results.
message BundleWinner {
  string  bidder_id  = 1;
  repeated uint32 item_ids = 2;
  double  payment    = 3;
}
message GreedyResult { repeated BundleWinner winners = 1; }

message RunGreedyAuctionRequest { string auction_id = 1; string requester_id = 2; }

// ──────────────────── Services ───────────────────────────────────────────────
service AuthService {
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);
  rpc Login      (LoginRequest)      returns (LoginResponse);
  rpc Logout     (LogoutRequest)     returns (LogoutResponse);
}

service AuctionService {
  // — single-item 2nd-price —
  rpc StartAuction (StartAuctionRequest) returns (StartAuctionResponse);
  rpc SubmitBid    (SubmitBidRequest)    returns (SubmitBidResponse);
  rpc EndAuction   (EndAuctionRequest)   returns (EndAuctionResponse);
  rpc GetWinner    (GetWinnerRequest)    returns (GetWinnerResponse);
  rpc ListAuctions (google.protobuf.Empty) returns (ListAuctionsResponse);

  // — bundle auction —
  rpc StartBundleAuction (StartBundleAuctionRequest)  returns (StartBundleAuctionResponse);
  rpc ListBundleItems    (ListBundleItemsRequest)     returns (ListBundleItemsResponse);
  rpc SubmitBundleBid    (SingleMindedBid)            returns (google.protobuf.Empty);
  rpc RunGreedyAuction   (RunGreedyAuctionRequest)    returns (GreedyResult);
  rpc ListBundleAuctions (google.protobuf.Empty) returns (ListBundleAuctionsResponse);
}
